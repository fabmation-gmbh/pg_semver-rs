/* 
This file is auto generated by pgx.

The ordering of items is not stable, it is driven by a dependency graph.
*/

-- src/version.rs:9
-- semver_rs::version::Semver
CREATE TYPE Semver;

-- src/version.rs:9
-- semver_rs::version::semver_in
CREATE  FUNCTION "semver_in"(
	"input" cstring /* core::option::Option<&cstr_core::CStr> */
) RETURNS Semver /* core::option::Option<semver_rs::version::Semver> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'semver_in_wrapper';

-- src/version.rs:9
-- semver_rs::version::semver_out
CREATE  FUNCTION "semver_out"(
	"input" Semver /* semver_rs::version::Semver */
) RETURNS cstring /* &cstr_core::CStr */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'semver_out_wrapper';

-- src/version.rs:9
-- semver_rs::version::Semver
CREATE TYPE Semver (
	INTERNALLENGTH = variable,
	INPUT = semver_in, /* semver_rs::version::semver_in */
	OUTPUT = semver_out, /* semver_rs::version::semver_out */
	STORAGE = extended
);

-- src/version.rs:11
-- semver_rs::version::semver_eq
CREATE  FUNCTION "semver_eq"(
	"left" Semver, /* semver_rs::version::Semver */
	"right" Semver /* semver_rs::version::Semver */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'semver_eq_wrapper';

-- src/version.rs:11
-- semver_rs::version::semver_eq
CREATE OPERATOR = (
	PROCEDURE="semver_eq",
	LEFTARG=Semver, /* semver_rs::version::Semver */
	RIGHTARG=Semver, /* semver_rs::version::Semver */
	NEGATOR = <>,
	RESTRICT = eqsel,
	JOIN = eqjoinsel,
	HASHES,
	MERGES
);

-- src/version.rs:11
-- semver_rs::version::semver_gt
CREATE  FUNCTION "semver_gt"(
	"left" Semver, /* semver_rs::version::Semver */
	"right" Semver /* semver_rs::version::Semver */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'semver_gt_wrapper';

-- src/version.rs:11
-- semver_rs::version::semver_gt
CREATE OPERATOR > (
	PROCEDURE="semver_gt",
	LEFTARG=Semver, /* semver_rs::version::Semver */
	RIGHTARG=Semver, /* semver_rs::version::Semver */
	COMMUTATOR = <,
	NEGATOR = <=,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);

-- src/version.rs:11
-- semver_rs::version::semver_lt
CREATE  FUNCTION "semver_lt"(
	"left" Semver, /* semver_rs::version::Semver */
	"right" Semver /* semver_rs::version::Semver */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'semver_lt_wrapper';

-- src/version.rs:11
-- semver_rs::version::semver_lt
CREATE OPERATOR < (
	PROCEDURE="semver_lt",
	LEFTARG=Semver, /* semver_rs::version::Semver */
	RIGHTARG=Semver, /* semver_rs::version::Semver */
	COMMUTATOR = >,
	NEGATOR = >=,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);

-- src/version.rs:11
-- semver_rs::version::semver_cmp
CREATE  FUNCTION "semver_cmp"(
	"left" Semver, /* semver_rs::version::Semver */
	"right" Semver /* semver_rs::version::Semver */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'semver_cmp_wrapper';

-- src/version.rs:11
-- semver_rs::version::semver_le
CREATE  FUNCTION "semver_le"(
	"left" Semver, /* semver_rs::version::Semver */
	"right" Semver /* semver_rs::version::Semver */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'semver_le_wrapper';

-- src/version.rs:11
-- semver_rs::version::semver_le
CREATE OPERATOR <= (
	PROCEDURE="semver_le",
	LEFTARG=Semver, /* semver_rs::version::Semver */
	RIGHTARG=Semver, /* semver_rs::version::Semver */
	COMMUTATOR = >=,
	NEGATOR = >,
	RESTRICT = scalarlesel,
	JOIN = scalarlejoinsel
);

-- src/version.rs:35
-- semver_rs::version::to_semver
CREATE  FUNCTION "to_semver"(
	"version" TEXT /* &str */
) RETURNS Semver /* semver_rs::version::Semver */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'to_semver_wrapper';

-- src/version.rs:11
-- semver_rs::version::semver_ne
CREATE  FUNCTION "semver_ne"(
	"left" Semver, /* semver_rs::version::Semver */
	"right" Semver /* semver_rs::version::Semver */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'semver_ne_wrapper';

-- src/version.rs:11
-- semver_rs::version::semver_ne
CREATE OPERATOR <> (
	PROCEDURE="semver_ne",
	LEFTARG=Semver, /* semver_rs::version::Semver */
	RIGHTARG=Semver, /* semver_rs::version::Semver */
	NEGATOR = =,
	RESTRICT = neqsel,
	JOIN = neqjoinsel
);

-- src/version.rs:11
-- semver_rs::version::semver_ge
CREATE  FUNCTION "semver_ge"(
	"left" Semver, /* semver_rs::version::Semver */
	"right" Semver /* semver_rs::version::Semver */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'semver_ge_wrapper';

-- src/version.rs:11
-- semver_rs::version::semver_ge
CREATE OPERATOR >= (
	PROCEDURE="semver_ge",
	LEFTARG=Semver, /* semver_rs::version::Semver */
	RIGHTARG=Semver, /* semver_rs::version::Semver */
	COMMUTATOR = <=,
	NEGATOR = <,
	RESTRICT = scalargesel,
	JOIN = scalargejoinsel
);

-- src/version.rs:11
-- semver_rs::version::Semver
CREATE OPERATOR FAMILY Semver_btree_ops USING btree;
CREATE OPERATOR CLASS Semver_btree_ops DEFAULT FOR TYPE Semver USING btree FAMILY Semver_btree_ops AS
	OPERATOR 1 <,
	OPERATOR 2 <=,
	OPERATOR 3 =,
	OPERATOR 4 >=,
	OPERATOR 5 >,
	FUNCTION 1 semver_cmp(Semver, Semver);

-- src/version.rs:11
-- semver_rs::version::semver_hash
CREATE  FUNCTION "semver_hash"(
	"value" Semver /* semver_rs::version::Semver */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'semver_hash_wrapper';

-- src/version.rs:11
-- semver_rs::version::Semver
CREATE OPERATOR FAMILY Semver_hash_ops USING hash;
CREATE OPERATOR CLASS Semver_hash_ops DEFAULT FOR TYPE Semver USING hash FAMILY Semver_hash_ops AS
	OPERATOR    1   =  (Semver, Semver),
	FUNCTION    1   semver_hash(Semver);

-- src/lib.rs:7
CREATE TYPE semverrange AS RANGE (SUBTYPE = semver);

